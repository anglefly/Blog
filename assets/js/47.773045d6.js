(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{454:function(_,v,t){"use strict";t.r(v);var n=t(30),e=Object(n.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"一个压缩图片的webpackplugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一个压缩图片的webpackplugin"}},[_._v("#")]),_._v(" 一个压缩图片的WebpackPlugin")]),_._v(" "),t("p",[_._v("若经常关注性能优化的话题，可能会发现无论怎样对代码做最好的优化也不及对一张图片做一次压缩好。所以压缩图片成了性能优化里最常见的操作，不管是手动压缩图片还是自动压缩图片，在项目开发过程中必须得有。")]),_._v(" "),t("p",[_._v("自动压缩图片通常在"),t("code",[_._v("webpack")]),_._v("构建项目时接入一些第三方"),t("code",[_._v("Loader&Plugin")]),_._v("来处理。打开"),t("code",[_._v("Github")]),_._v("，搜素"),t("code",[_._v("webpack image")]),_._v("等关键字，"),t("code",[_._v("Star")]),_._v("最多还是"),t("code",[_._v("image-webpack-loader")]),_._v("和"),t("code",[_._v("imagemin-webpack-plugin")]),_._v("这两个"),t("code",[_._v("Loader&Plugin")]),_._v("。很多同学可能都会选择它们，方便快捷，简单易用，无脑接入。")]),_._v(" "),t("p",[_._v("可是，这两个"),t("code",[_._v("Loader&Plugin")]),_._v("存在一些特别问题，它们都是基于"),t("code",[_._v("imagemin")]),_._v("开发的。"),t("code",[_._v("imagemin")]),_._v("的某些依赖托管在国外服务器，在"),t("code",[_._v("npm i xxx")]),_._v("安装它们时会默认走"),t("code",[_._v("GitHub Releases")]),_._v("的托管地址，若不是规范上网，你们是不可能安装得上的，即使规范上网也不一定安装得上。所以笔者又刨根到底发表了一篇关于NPM镜像处理的文章《聊聊NPM镜像那些险象环生的坑》，专门解决这些因为网络环境而导致安装失败的问题。除了这个安装问题，"),t("code",[_._v("imagemin")]),_._v("还存在另一个大问题，就是压缩质感损失得比较严重，图片体积越大越明显，压缩出来的图片总有几张是失真的，而且总体压缩率不是很高。这样在交付项目时有可能被细心的QA小姐姐抓个正着，怎么和设计图对比起来不清晰啊！")]),_._v(" "),t("h2",{attrs:{id:"工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工具"}},[_._v("#")]),_._v(" 工具")]),_._v(" "),t("h3",{attrs:{id:"图片压缩工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图片压缩工具"}},[_._v("#")]),_._v(" 图片压缩工具")]),_._v(" "),t("p",[_._v("此时可能有些同学已转战到手动压缩图片了。比较好用的图片压缩工具无非就是以下几个，若有更好用的工具麻烦在评论里补充喔！同时笔者也整理出它们的区别，供各位同学参考。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/v735W8ZTLWnQkSibwV3neZmE5paiaVlTllbQ77rl6nIHs17KuoricUTpxGYQNnXbT5pibgiaRcdHclcvVFPhs01IZeA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"img"}})]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("工具")]),_._v(" "),t("th",[_._v("开源")]),_._v(" "),t("th",[_._v("收费")]),_._v(" "),t("th",[_._v("API")]),_._v(" "),t("th",[_._v("免费体验")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("QuickPicture")]),_._v(" "),t("td",[_._v("✖️")]),_._v(" "),t("td",[_._v("✔️")]),_._v(" "),t("td",[_._v("✖️")]),_._v(" "),t("td",[_._v("可压缩类型较多，压缩质感较好，有体积限制，有数量限制")])]),_._v(" "),t("tr",[t("td",[_._v("ShrinkMe")]),_._v(" "),t("td",[_._v("✖️")]),_._v(" "),t("td",[_._v("✖️")]),_._v(" "),t("td",[_._v("✖️")]),_._v(" "),t("td",[_._v("可压缩类型较多，压缩质感一般，无数量限制，有体积限制")])]),_._v(" "),t("tr",[t("td",[_._v("Squoosh")]),_._v(" "),t("td",[_._v("✔️")]),_._v(" "),t("td",[_._v("✖️")]),_._v(" "),t("td",[_._v("✔️")]),_._v(" "),t("td",[_._v("可压缩类型较少，压缩质感一般，无数量限制，有体积限制")])]),_._v(" "),t("tr",[t("td",[_._v("TinyJpg")]),_._v(" "),t("td",[_._v("✖️")]),_._v(" "),t("td",[_._v("✔️")]),_._v(" "),t("td",[_._v("✔️")]),_._v(" "),t("td",[_._v("可压缩类型较少，压缩质感很好，有数量限制，有体积限制")])]),_._v(" "),t("tr",[t("td",[_._v("TinyPng")]),_._v(" "),t("td",[_._v("✖️")]),_._v(" "),t("td",[_._v("✔️")]),_._v(" "),t("td",[_._v("✔️")]),_._v(" "),t("td",[_._v("可压缩类型较少，压缩质感很好，有数量限制，有体积限制")])]),_._v(" "),t("tr",[t("td",[_._v("Zhitu")]),_._v(" "),t("td",[_._v("✖️")]),_._v(" "),t("td",[_._v("✖️")]),_._v(" "),t("td",[_._v("✖️")]),_._v(" "),t("td",[_._v("可压缩类型一般，压缩质感一般，有数量限制，有体积限制")])])])]),_._v(" "),t("p",[_._v("从上述表格对比可看出，免费体验都会存在"),t("strong",[_._v("体积限制")]),_._v("，这个可理解，即使收费也一样，毕竟每个人都上传单张10多M的图片，哪个服务器能受得了。再来就是"),t("strong",[_._v("数量限制")]),_._v("，一次只能上传20张，好像有个规律，压缩质感好就限制数量，否则就不限制数量，当然收费后就没有限制了。再来就是"),t("strong",[_._v("可压缩类型")]),_._v("，图片类型一般是"),t("strong",[_._v("jpg")]),_._v("、"),t("strong",[_._v("png")]),_._v("、"),t("strong",[_._v("gif")]),_._v("、"),t("strong",[_._v("svg")]),_._v("和"),t("strong",[_._v("webp")]),_._v("，"),t("strong",[_._v("gif")]),_._v("压缩后一般都会失真，"),t("strong",[_._v("svg")]),_._v("通常用在矢量图标上很少用在场景图片上，"),t("strong",[_._v("webp")]),_._v("由于兼容性问题很少被使用，故能压缩"),t("strong",[_._v("jpg")]),_._v("和"),t("strong",[_._v("png")]),_._v("就足够了。当然压缩质感是最优考虑，综上所述，大部分同学都会选择"),t("code",[_._v("「TinyJpg」")]),_._v("和"),t("code",[_._v("「TinyPng」")]),_._v("，其实它俩就是兄弟，出自同一厂商。")]),_._v(" "),t("h3",{attrs:{id:"tinyjpg-tinypng存在问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tinyjpg-tinypng存在问题"}},[_._v("#")]),_._v(" TinyJpg/TinyPng存在问题")]),_._v(" "),t("ol",[t("li",[_._v("上传下载全靠手动")]),_._v(" "),t("li",[_._v("只能压缩"),t("code",[_._v("jpg")]),_._v("和"),t("code",[_._v("png")])]),_._v(" "),t("li",[_._v("每次只能压缩20张")]),_._v(" "),t("li",[_._v("每张体积最大不能超过5M")]),_._v(" "),t("li",[_._v("可视化处理信息不是特别齐全")])]),_._v(" "),t("h3",{attrs:{id:"tinyjpg-tinypng压缩原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tinyjpg-tinypng压缩原理"}},[_._v("#")]),_._v(" TinyJpg/TinyPng压缩原理")]),_._v(" "),t("p",[_._v("**「TinyJpg/TinyPng」**使用智能有损压缩技术将图片体积降低，选择性地减少图片中相似颜色，只需很少字节就能保存数据。对视觉影响几乎不可见，但是在文件体积上就有很大的差别。而使用到智能有损压缩技术被称为「量化」。")]),_._v(" "),t("p",[_._v("**「TinyJpg/TinyPng」**在压缩png文件时效果更显著。扫描图片中相似颜色并将其合并，通过减少颜色数量将24位png文件转换成体积更小的8位png文件，丢弃所有不必要的元数据。")]),_._v(" "),t("p",[_._v("大部分png文件都有50%~70%的压缩率，即使视力再好也很难区分出来。使用优化过的图片可减少带宽流量和加载时间，整个网站使用到的图片经"),t("code",[_._v("「TinyJpg/TinyPng」")]),_._v("压缩一遍，其成效是再多的代码优化也无法追赶得上的。")]),_._v(" "),t("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/v735W8ZTLWnQkSibwV3neZmE5paiaVlTllI2beSTeFcKicvIPGkfhpsx2mVib4Z0ja3C7jbZ9FH6r8eXPiaphwG2pKg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",width:"200px"}}),_._v(" "),t("h3",{attrs:{id:"tinyjpg-tinypng开发api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tinyjpg-tinypng开发api"}},[_._v("#")]),_._v(" TinyJpg/TinyPng开发API")]),_._v(" "),t("p",[_._v("查阅相关资料，发现"),t("code",[_._v("「TinyJpg/TinyPng」")]),_._v("暂时还未开源其压缩算法，不过提供了适合开发者使用的API。有兴趣的同学可到其开发API文档瞧瞧。")]),_._v(" "),t("p",[_._v("在Node方面，"),t("code",[_._v("「TinyJpg/TinyPng」")]),_._v("官方提供了"),t("code",[_._v("tinify")]),_._v("作为压缩图片的核心JS库，使用很简单，看文档吧。可是换成开发API还是逃不过收费，你是想包月呢还是免费呢，想免费的话就继续往下看，土豪随意！")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/v735W8ZTLWnQkSibwV3neZmE5paiaVlTlliavxJAtdicxl1WMichC23kd2icOkPNHIKlVoOibSYib4Dtd3Fj7r2vRr7W5w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"img"}})]),_._v(" "),t("h2",{attrs:{id:"实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[_._v("#")]),_._v(" 实现")]),_._v(" "),t("p",[_._v("笔者也是经常使用"),t("code",[_._v("「TinyJpg/TinyPng」")]),_._v("的程序猿，收费，那是不可能的😂。寻找突破口，解决问题，是作为一位程序猿最基本的素养。我们需明确什么问题，需解决什么问题。")]),_._v(" "),t("h3",{attrs:{id:"分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分析"}},[_._v("#")]),_._v(" 分析")]),_._v(" "),t("p",[_._v("从上述得知，只需对「TinyJpg/TinyPng」原有功能改造成以下功能。")]),_._v(" "),t("ul",[t("li",[_._v("上传下载全自动")]),_._v(" "),t("li",[_._v("可压缩jpg和png")]),_._v(" "),t("li",[_._v("没有数量限制")]),_._v(" "),t("li",[_._v("存在体积限制，最大体积不能超过5M")]),_._v(" "),t("li",[_._v("压缩成功与否输出详细信息")])]),_._v(" "),t("blockquote",[t("p",[_._v("自动处理")])]),_._v(" "),t("p",[_._v("对于前端开发者来说，这种无脑的上传下载操作必须得自动化，省事省心省力。但是这个操作得结合webpack来处理，到底是开发成Loader还是Plugin，后面再分析。不过细心的同学看标题就知道用什么方式处理了。")]),_._v(" "),t("blockquote",[t("p",[_._v("压缩类型")])]),_._v(" "),t("p",[_._v("gif压缩后一般都会失真，svg通常用在矢量图标上很少用在场景图片上，webp由于兼容性问题很少被使用，故能压缩jpg和png就足够了。在过滤图片时，使用path模块判断文件类型是否为jpg和png，是则继续处理，否则不处理。")]),_._v(" "),t("blockquote",[t("p",[_._v("数量限制")])]),_._v(" "),t("p",[_._v("数量限制当然是不能存在的，万一项目里超过20张图片，那不是得分批处理，这个不能有。对于这种无需登录状态就能处理一些用户文件的网站，通常都会通过IP来限制用户的操作次数。有些同学可能会说，刷新页面不就行了吗，每次压缩20张图片，再刷新再压缩，万一有500张图片呢，你就刷新25次吗，这样很好玩是吧！")]),_._v(" "),t("p",[_._v("由于大多数Web架构很少会将应用服务器直接对外提供服务，一般都会设置一层Nginx作为代理和负载均衡，有的甚至可能有多层代理。鉴于大多数Web架构都是使用Nginx作为反向代理，用户请求不是直接请求应用服务器的，而是通过Nginx设置的统一接入层将用户请求转发到服务器的，所以可通过设置HTTP请求头字段X-Forwarded-For来伪造IP。")]),_._v(" "),t("p",[_._v("「X-Forwarded-For」指用来识别通过代理或负载均衡的方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段。当然，这个IP也不是一成不变的，每次请求都需随机更换IP，骗过应用服务器。若应用服务器增加了伪造IP识别，那可能就无法继续使用随机IP了。")]),_._v(" "),t("blockquote",[t("p",[_._v("体积限制")])]),_._v(" "),t("p",[_._v("体积限制这个能理解，也没必要搞一张那么大的图片，多浪费带宽流量和加载时间啊。在上传图片时，使用fs模块判断文件体积是否超过5M，是则不上传，否则继续上传。当然，交给「TinyJpg/TinyPng」接口判断也行。")]),_._v(" "),t("blockquote",[t("p",[_._v("输出信息")])]),_._v(" "),t("p",[_._v("压缩成功与否得让别人知道，输出原始大小、压缩大小、压缩率和错误提示等，让别人清楚这些处理信息。")]),_._v(" "),t("h3",{attrs:{id:"编码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编码"}},[_._v("#")]),_._v(" 编码")]),_._v(" "),t("blockquote",[t("p",[_._v("随机生成HTTP请求头")])]),_._v(" "),t("p",[_._v("既然可通过"),t("code",[_._v("X-Forwarded-For")]),_._v("来伪造IP，那么得有一个随机生成HTTP请求头字段的函数，每次请求接口时都随机生成相关的请求头字段。打开"),t("code",[_._v("tinyjpg.com")]),_._v("或"),t("code",[_._v("tinypng.com")]),_._v("上传一张图片，通过"),t("code",[_._v("Chrome DevTools")]),_._v("分析"),t("code",[_._v("Network")]),_._v("发现其请求接口是"),t("code",[_._v("web/shrink")]),_._v("。另外每次请求也不要集中在单一的"),t("code",[_._v("hostname")]),_._v("上，随机派发到"),t("code",[_._v("tinyjpg.com")]),_._v("或"),t("code",[_._v("tinypng.com")]),_._v("上会更好。通过封装"),t("code",[_._v("RandomHeader")]),_._v("函数随机生成请求头信息，后续使用"),t("code",[_._v("https")]),_._v("模块以"),t("code",[_._v("RandomHeader()")]),_._v("生成的配置作为入参进行请求。")]),_._v(" "),t("p",[t("code",[_._v("trample")]),_._v("是笔者开发的一个"),t("code",[_._v("Web/Node")]),_._v("通用函数工具库，包含常规的工具函数，助你少写更多通用代码。详情请查看文档，顺便给一个Star以作鼓励。")]),_._v(" "),t("blockquote",[t("p",[_._v("剩下未整理，点击"),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/GmanEUfRUfuNzhPCILf3Ew",target:"_blank",rel:"noopener noreferrer"}},[_._v("此处"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=e.exports}}]);